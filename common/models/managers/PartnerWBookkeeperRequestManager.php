<?php
/**
 * Created by PhpStorm.
 * User: zhenya
 * Date: 6.5.16
 * Time: 12.31
 */

namespace common\models\managers;


use common\models\PartnerWBookkeeperRequest;
use common\models\PartnerExpenseCatLink;
use common\models\Expense;

use common\models\ExchangeCurrencyHistory;
use common\models\PartnerPurse;
use common\models\PartnerPurseHistory;
use common\models\PartnerWithdrawalRequest;
use yii\helpers\BaseStringHelper;
use yii\web\NotFoundHttpException;
use yii\web\ServerErrorHttpException;
use Yii;
use backend\widgets\Alert;

class PartnerWBookkeeperRequestManager extends PartnerWBookkeeperRequest
{
    /**
     * @return bool
     * @throws NotFoundHttpException
     * @throws ServerErrorHttpException
     */
    public function processPartnerWithdrawal()
    {
        if(null == $iExpenseID = $this->createExpense())
            return FALSE;

        if(!$this->partnerPurseOperations($iExpenseID))
            return FALSE;
        return TRUE;
    }

    /**
     * @return int|null
     */
    protected function createExpense()
    {
        $obCat = PartnerExpenseCatLink::find()->where(['type' => PartnerExpenseCatLink::TYPE_MONEY,'legal_person_id' => $this->legal_id])->one();
        if($obCat) {
            $obExpense = new Expense();
            $obExpense->cat_id = $obCat->expanse_cat_id;
            $obExpense->currency_id = $this->currency_id;
            $obExpense->cuser_id = $this->contractor_id;
            $obExpense->legal_id = $this->legal_id;
            $obExpense->pay_date = time();
            $obExpense->pay_summ = $this->amount;
            $obExpense->description = $this->description;
            $obExpense->pw_request_id = $this->request_id;
            if($obExpense->save())
                return $obExpense->id;
        }
        else{
            Yii::$app->session->setFlash(Alert::TYPE_WARNING,Yii::t('app/users','Category expense not found'));
            return true;
        }
        return NULL;
    }

    /**
     * @param $iExpenseID
     * @return bool
     * @throws NotFoundHttpException
     * @throws ServerErrorHttpException
     */
    protected function partnerPurseOperations($iExpenseID)
    {
        $obPurseHistory = new PartnerPurseHistory();
        $obPurseHistory->amount = $this->factual_amount_in_base_currency;
        $obPurseHistory->type = PartnerPurseHistory::TYPE_EXPENSE;
        $obPurseHistory->cuser_id = $this->partner_id;
        if($iExpenseID !== true)
            $obPurseHistory->expense_id = $iExpenseID;
        if(!$obPurseHistory->save())
            throw new ServerErrorHttpException('Can not save purse history');

        /** @var PartnerPurse $obPurse */
        $this->request->processBookkeeper($obPurseHistory->amount);

        $obPurse = PartnerPurse::getPurse($this->partner_id);
        $obPurse->amount -= $obPurseHistory->amount;
        
        
        if(!$obPurse->save())
            throw new ServerErrorHttpException('Can not save purse');

        return TRUE;
    }

    /***
     * @return array
     */
    public function behaviors()
    {
        return parent::behaviors(); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getShortClassCustom()
    {
        return BaseStringHelper::basename(PartnerWBookkeeperRequest::className());
    }

}